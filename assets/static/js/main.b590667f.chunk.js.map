{"version":3,"sources":["serviceWorker.js","Guidoune.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Guidoune","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","interval","setInterval","props","addText","prevProps","prevState","clearInterval","react_default","a","createElement","onClick","toggle","React","Component","Rain","call","state","text","toggleEnthusiasm","bind","assertThisInitialized","handleChange","setState","newText","e","setText","target","button","Guidoune_Guidoune","rows","cols","onChange","ReactDOM","render","src_Rain","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBC,IAAMC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,oBAAAC,MAAA,WACsB,IAAAC,EAAAT,KAClBA,KAAKU,SAAWC,YAAY,WAC1BF,EAAKG,MAAMC,QAAQ,cAClB,MAJP,CAAAN,IAAA,uBAAAC,MAAA,SAOuBM,EAAWC,GAC9BC,cAAchB,KAAKU,YARvB,CAAAH,IAAA,SAAAC,MAAA,WAYI,OACES,EAAAC,EAAAC,cAAA,UAAQC,QAASpB,KAAKY,MAAMS,QAA5B,uBAbNzB,EAAA,CAA8B0B,IAAMC,8CCK7B,IAAMC,EAAb,SAAA3B,GACE,SAAA2B,EAAYZ,GAAO,IAAAH,EAAA,OAAAX,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACjBf,EAAAX,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAAC,KAAAzB,KAAMY,KAEDc,MAAQ,CACX9B,UAAU,EACV+B,KAAM,IAGRlB,EAAKmB,iBAAmBnB,EAAKmB,iBAAiBC,KAAtB/B,OAAAgC,EAAA,EAAAhC,CAAAW,IACxBA,EAAKI,QAAUJ,EAAKI,QAAQgB,KAAb/B,OAAAgC,EAAA,EAAAhC,CAAAW,IACfA,EAAKsB,aAAetB,EAAKsB,aAAaF,KAAlB/B,OAAAgC,EAAA,EAAAhC,CAAAW,IAVHA,EADrB,OAAAX,OAAAO,EAAA,EAAAP,CAAA0B,EAAA3B,GAAAC,OAAAQ,EAAA,EAAAR,CAAA0B,EAAA,EAAAjB,IAAA,mBAAAC,MAAA,WAeIR,KAAKgC,SAAS,CACZpC,UAAWI,KAAK0B,MAAM9B,aAhB5B,CAAAW,IAAA,UAAAC,MAAA,SAoBUmB,GACN3B,KAAKgC,SAAS,CAAEL,KAAMA,MArB1B,CAAApB,IAAA,UAAAC,MAAA,SAwBUyB,GACN,IAAIN,EAAO3B,KAAK0B,MAAMC,KAAOM,EAC7BjC,KAAKgC,SAAS,CAAEL,KAAMA,MA1B1B,CAAApB,IAAA,eAAAC,MAAA,SA6Be0B,GACXlC,KAAKmC,QAAQD,EAAEE,OAAO5B,SA9B1B,CAAAD,IAAA,SAAAC,MAAA,WAkCI,IAAI6B,EAaJ,OAXEA,EADErC,KAAK0B,MAAM9B,SAEXqB,EAAAC,EAAAC,cAACmB,EAAD,CAAUjB,OAAQrB,KAAK4B,iBAAkBf,QAASb,KAAKa,UAIvDI,EAAAC,EAAAC,cAAA,UAAQC,QAASpB,KAAK4B,kBAAtB,wBAOFX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,YAAUoB,KAAK,IAAIC,KAAK,KAAKhC,MAAOR,KAAK0B,MAAMC,KAC7Cc,SAAUzC,KAAK+B,eAEhBM,EACDpB,EAAAC,EAAAC,cAAA,UAAKnB,KAAK0B,MAAMC,WAtDxBH,EAAA,CAA0BF,IAAMC,WA4DhCmB,IAASC,OACP1B,EAAAC,EAAAC,cAACyB,EAAD,MACAC,SAASC,eAAe,SF4DpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCGnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b590667f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nexport class Guidoune extends React.Component {\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.props.addText('guidoune ');\r\n    }, 15);\r\n  }\r\n  \r\n  componentWillUnmount(prevProps, prevState){\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button onClick={this.props.toggle}>\r\n        J'ai eu ma dose\r\n      </button>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Guidoune } from './Guidoune';\n\nexport class Rain extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Guidoune: false,\n      text: ''\n    };\n\n    this.toggleEnthusiasm = this.toggleEnthusiasm.bind(this);\n    this.addText = this.addText.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  toggleEnthusiasm() {\n    this.setState({\n      Guidoune: !this.state.Guidoune\n    });\n  }\n\n  setText(text) {\n    this.setState({ text: text });\n  }\n\n  addText(newText) {\n    let text = this.state.text + newText;\n    this.setState({ text: text });\n  }\n\n  handleChange(e) {\n    this.setText(e.target.value);\n  }\n\n  render() {\n    let button;\n    if (this.state.Guidoune) {\n      button = (\n        <Guidoune toggle={this.toggleEnthusiasm} addText={this.addText} />\n      );\n    } else {\n      button = (\n        <button onClick={this.toggleEnthusiasm}>\n          Pluie de guidounes !\n        </button>\n      );\n    }\n\n    return (\n      <div>\n        <h1>Météo du jour</h1>\n        <textarea rows=\"7\" cols=\"40\" value={this.state.text} \n          onChange={this.handleChange}>\n        </textarea>\n        {button}\n        <h2>{this.state.text}</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Rain />, \n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}